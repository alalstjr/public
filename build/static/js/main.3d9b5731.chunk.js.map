{"version":3,"sources":["components/svg/SVG.js","components/Header.js","components/Authentication.js","components/Write.js","components/Memo.js","components/MemoList.js","components/Search.js","module/auth.js","module/auth_api.js","module/search.js","module/search_api.js","containers/App.js","module/memo.js","module/memo_api.js","containers/Home.js","containers/Wall.js","containers/auth/Login.js","containers/auth/Register.js","module/index.js","store/index.js","store/configure.js","index.js"],"names":["svg","search","login","logout","star","SVG","React","Component","react_default","a","createElement","x","y","width","this","props","height","viewBox","fill","color","d","name","funcName","Header","_this","Header_classCallCheck","Header_getPrototypeOf","call","Header_assertThisInitialized","setState","state","loginButton","Link","to","svg_SVG","className","logoutButton","onClick","onLogout","toggleSearch","isLoggedIn","react_addons_css_transition_group_default","transitionName","transitionEnterTimeout","transitionLeaveTimeout","components_Search","onClose","usernames","onSearch","searchStatus","undefined","propTypes","PropTypes","bool","func","defaultProps","console","warn","concat","Authentication","Authentication_classCallCheck","Authentication_getPrototypeOf","username","password","handleChange","bind","Authentication_assertThisInitialized","handleLogin","handleRegister","handleKeyPress","e","nextState","target","value","_this2","id","pw","onLogin","then","success","_this3","onRegister","result","charCode","mode","inputBoxes","type","onChange","onKeyPress","loginView","registerView","warning","Write","Write_classCallCheck","Write_getPrototypeOf","contents","hanldleChange","Write_assertThisInitialized","handlePost","onPost","placeholder","error","Memo","Memo_classCallCheck","Memo_getPrototypeOf","editMode","editText","data","activeBtn","Memo_assertThisInitialized","toggleEdit","handleRemove","handleStar","nextProps","current","next","JSON","stringify","btnBox","document","getElementById","_id","style","display","opacity","index","onEdit","onRemove","onStar","_this$props","editedInfo","ownership","lib_default","date","edited","live","dropDownMenu","data-activates","editView","starStyle","starred","indexOf","currentUser","memoView","writer","created","is_edited","href","length","object","number","string","Date","MemoList","log","map","memo","i","Memo_Memo","key","array","Search","Search_classCallCheck","Search_getPrototypeOf","Search_assertThisInitialized","keyCode","handleClose","history","push","keyword","handleSearch","onkeydown","evt","window","event","onKeyDown","handleKeyDown","user","withRouter","auth_login","createAction","auth_login_success","auth_login_failure","auth_register","auth_register_success","auth_register_failure","auth_get_status","auth_get_status_success","auth_get_status_failure","auth_logout","handleActions","auth_defineProperty","_handleActions","update","status","$set","action","register","valid","loginRequest","dispatch","types","axios","post","response","loginSuccess","catch","registerRequest","registerFailure","code","getStatusRequest","get","info","logoutRequest","search_success","search_failure","search_defineProperty","search_handleActions","searchHead","searchRequest","dispath","es6promise","polyfill","App","App_classCallCheck","App_getPrototypeOf","App_assertThisInitialized","handleLogout","loginData","parts","cookie","split","pop","shift","getCookie","parse","atob","btoa","$toastContent","$","Materialize","toast","isAuth","test","location","pathname","components_Header","searchUsers","Route","exact","path","component","Home","Login","Register","Wall","connect","authentication","memo_post","memo_post_success","memo_post_failure","memo_list","memo_list_success","memo_list_failure","memo_edit","memo_edit_success","memo_edit_failure","memo_remove","memo_remove_success","memo_remove_failure","memo_star","memo_star_success","memo_star_failure","module_memo","memo_defineProperty","memo_handleActions","list","isInitial","isLast","listType","$unshift","$push","edit","remove","$splice","memoPostRequest","memoPostFailure","memoListRequest","url","memoListSuccess","memoEditRequest","put","memoEditSuccess","memoEditFailure","memoRemoveRequest","delete","memoRemoveSuccess","memoRemoveFailure","memoStarRequest","memoStarSuccess","memoStarFailure","Home_classCallCheck","Home_getPrototypeOf","Home_assertThisInitialized","loadNewMemo","loadOldMemo","componentWillUnmount","componentDidMount","scrollEvent","handleEdit","loadingState","initiallyLoaded","postStatus","documentElement","scrollHeight","innerHeight","scrollY","addEventListener","loadUntilScrollable","offsetHeight","setTimeout","loadMemoLoop","memoLoaderTimeoutId","prevProps","prevState","clearTimeout","removeEventListener","listStatus","Promise","resolve","reject","memoData","_this4","lastId","_this5","editStatus","reload","_this6","removeStatus","_this7","starStatus","write","components_Write","emptyView","wallHeader","MemoList_MemoList","match","params","containers_Home","Login_classCallCheck","Login_getPrototypeOf","Login_assertThisInitialized","components_Authentication","Register_classCallCheck","Register_getPrototypeOf","Register_assertThisInitialized","errorCode","combineReducers","configure","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","es","store","BrowserRouter","containers_App"],"mappings":"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","file":"static/js/main.3d9b5731.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst svg = {\r\n    search : \"M451.248,354.559c81.001-81.002,81-212.805,0-293.807c-81.002-81.002-212.802-81.002-293.803,0c-68.72,68.72-79.127,170.923-31.251,250.733c0,0,3.439,5.77-1.206,10.412C98.491,348.392,18.994,427.89,18.994,427.89c-21.097,21.096-26.12,50.595-7.411,69.307l3.221,3.219c18.709,18.712,48.21,13.691,69.305-7.406c0,0,79.329-79.33,105.771-105.771c4.867-4.868,10.635-1.429,10.635-1.429C280.325,433.685,382.528,423.278,451.248,354.559z M195.799,316.202c-59.853-59.853-59.851-157.238,0.001-217.091c59.853-59.851,157.238-59.853,217.09,0c59.853,59.851,59.853,157.238,0,217.091C353.038,376.052,255.654,376.052,195.799,316.202z M209.059,195.326c-2.786,0-5.618-0.548-8.348-1.701c-10.904-4.615-16.005-17.196-11.39-28.102c29.006-68.546,108.369-100.714,176.914-71.708c10.904,4.615,16.006,17.196,11.391,28.102c-4.616,10.906-17.194,16.004-28.104,11.391c-46.767-19.789-100.919,2.159-120.707,48.926C225.353,190.413,217.413,195.326,209.059,195.326z\",\r\n    login : \"M131.5,472H60.693c-8.538,0-13.689-4.765-15.999-7.606c-3.988-4.905-5.533-11.289-4.236-17.519c20.769-99.761,108.809-172.616,210.445-174.98c1.693,0.063,3.39,0.105,5.097,0.105c1.723,0,3.434-0.043,5.143-0.107c24.853,0.567,49.129,5.24,72.235,13.918c10.34,3.885,21.871-1.353,25.754-11.693c3.883-10.34-1.352-21.871-11.692-25.754c-3.312-1.244-6.646-2.408-9.995-3.512C370.545,220.021,392,180.469,392,136C392,61.01,330.991,0,256,0S120,61.01,120,136c0,44.509,21.492,84.092,54.643,108.918c-30.371,9.998-58.871,25.546-83.813,46.063c-45.732,37.617-77.529,90.086-89.532,147.742c-3.762,18.066,0.744,36.622,12.363,50.908C25.221,503.847,42.364,512,60.693,512H131.5c11.046,0,20-8.954,20-20S142.546,472,131.5,472z M160,136c0-52.935,43.065-96,96-96c52.935,0,96,43.065,96,96c0,51.367-40.554,93.438-91.326,95.885c-1.557-0.028-3.113-0.052-4.674-0.052c-1.564,0-3.127,0.023-4.689,0.051C200.546,229.43,160,187.362,160,136z M496.689,344.607c-8.562-19.15-27.846-31.559-49.177-31.607h-62.372c-0.045,0-0.087,0-0.133,0c-22.5,0-42.13,13.26-50.029,33.807c-1.051,2.734-2.336,6.178-3.677,10.193H200.356c-5.407,0-10.583,2.189-14.35,6.068l-34.356,35.388c-7.567,7.794-7.529,20.203,0.085,27.95l35,35.611c3.76,3.826,8.9,5.981,14.264,5.981h65c11.046,0,20-8.954,20-20s-8.954-20-20-20h-56.614l-15.428-15.698L208.814,397h137.491c9.214,0,17.235-6.295,19.427-15.244c1.617-6.607,3.647-12.959,6.584-20.596c1.936-5.036,6.798-8.16,12.74-8.16c0.014,0,0.026,0,0.039,0h62.371c5.656,0.014,10.524,3.053,12.705,7.932c5.369,12.012,11.78,30.608,11.828,50.986c0.048,20.529-6.356,39.551-11.739,51.894c-2.17,4.979-7.079,8.188-12.56,8.188c-0.011,0-0.022,0-0.033,0h-63.125c-5.533-0.013-10.716-3.573-12.896-8.858c-2.34-5.671-4.366-12.146-6.197-19.797c-2.571-10.742-13.367-17.365-24.105-14.796c-10.743,2.571-17.367,13.364-14.796,24.106c2.321,9.699,4.979,18.118,8.121,25.737c8.399,20.364,27.939,33.556,49.827,33.606h63.125c0.043,0,0.083,0,0.126,0c21.351-0.001,40.646-12.63,49.18-32.201c6.912-15.851,15.138-40.511,15.072-67.975C511.935,384.434,503.638,360.152,496.689,344.607z M431,392c11.046,0,20,8.954,20,20s-8.954,20-20,20s-20-8.954-20-20S419.954,392,431,392z\",\r\n    logout : \"M510.371,226.513c-1.088-2.603-2.646-4.971-4.629-6.955l-63.979-63.979c-8.341-8.32-21.823-8.32-30.165,0c-8.341,8.341-8.341,21.845,0,30.165l27.584,27.584H320.013c-11.797,0-21.333,9.557-21.333,21.333c0,11.776,9.536,21.333,21.333,21.333h119.168l-27.584,27.584c-8.341,8.341-8.341,21.845,0,30.165c4.16,4.181,9.621,6.251,15.083,6.251s10.923-2.069,15.083-6.251l63.979-63.979c1.983-1.963,3.541-4.331,4.629-6.955C512.525,237.606,512.525,231.718,510.371,226.513z M362.68,298.667c-11.797,0-21.333,9.558-21.333,21.333v106.667h-85.333V85.333c0-9.408-6.187-17.728-15.211-20.437l-74.091-22.229h174.635v106.667c0,11.776,9.536,21.333,21.333,21.333s21.333-9.557,21.333-21.333v-128C384.013,9.557,374.477,0,362.68,0H21.347c-0.768,0-1.451,0.32-2.197,0.405c-1.003,0.107-1.92,0.277-2.88,0.512c-2.24,0.576-4.267,1.451-6.165,2.645C9.636,3.861,9.06,3.882,8.612,4.223C8.44,4.352,8.376,4.587,8.205,4.715C5.88,6.549,3.939,8.789,2.531,11.456c-0.299,0.576-0.363,1.195-0.597,1.792c-0.683,1.621-1.429,3.2-1.685,4.992c-0.107,0.64,0.085,1.237,0.064,1.856c-0.021,0.427-0.299,0.811-0.299,1.237V448c0,10.176,7.189,18.923,17.152,20.907l213.333,42.667c1.387,0.299,2.795,0.427,4.181,0.427c4.885,0,9.685-1.685,13.525-4.843c4.928-4.054,7.808-10.091,7.808-16.491v-21.333H362.68c11.797,0,21.333-9.557,21.333-21.333V320C384.013,308.225,374.477,298.667,362.68,298.667z\",\r\n    star : \"M503.713,224.356L399.809,325.652l24.523,143.039c1.758,10.299-2.499,20.721-10.943,26.872c-4.778,3.475-10.464,5.245-16.148,5.245c-4.366,0-8.761-1.043-12.783-3.158L256,430.12l-128.457,67.53c-9.255,4.875-20.46,4.051-28.932-2.06c-8.445-6.151-12.688-16.56-10.916-26.872l24.538-143.039L8.301,224.37c-7.511-7.292-10.175-18.208-6.976-28.149c3.24-9.941,11.823-17.178,22.176-18.688l143.616-20.885L231.38,26.501c4.6-9.392,14.157-15.324,24.606-15.324c10.477,0,19.992,5.932,24.62,15.311l64.263,130.146l143.644,20.885c10.326,1.497,18.936,8.747,22.121,18.688C513.901,206.148,511.169,217.065,503.713,224.356z\"\r\n}\r\n\r\nclass SVG extends React.Component {\r\n    render() {\r\n        return (\r\n            <svg\r\n                x=\"0px\" y=\"0px\"\r\n                width={this.props.width ? this.props.width : \"auto\"}\r\n                height={this.props.height ? this.props.height : \"auto\"}\r\n                viewBox=\"0 0 512 512\">\r\n                <path\r\n                    fill={this.props.color}\r\n                    d={svg[this.props.name]}\r\n                />\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SVG;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from \"react-router-dom\";\nimport { Search } from 'components';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group'\n\n// SVG\nimport SVG from 'components/svg/SVG';\n\nclass Header extends React.Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            search : false\n        }\n    }\n\n    // 구현 : 검색 상태를 전환하는 toggleSearch 메소드 작성\n    toggleSearch = () => {\n        let setState = () => {\n            this.setState({\n                search : !this.state.search\n            });\n        }\n\n        this.state.search ? setState() : setState();\n    }\n\n    render() {\n        \n        const loginButton = (\n            <li>\n                <Link to=\"/login\">\n                    <SVG name=\"login\" width=\"2rem\" height=\"4rem\" color=\"#ffffff\" />\n                    <div className=\"t-h\">login</div>\n                </Link>\n            </li>\n        );\n\n        const logoutButton = (\n            <li>\n                <a onClick={this.props.onLogout}>\n                    <SVG name=\"logout\" width=\"2rem\" height=\"4rem\" color=\"#ffffff\" />\n                    <div className=\"t-h\">logout</div>\n                </a>\n            </li>\n        );\n        \n        return (\n            <div>\n                <nav>\n                    <div className=\"nav-wrapper blue darken-1\">\n                        <Link to=\"/\" className=\"brand-logo center\">MEMOPAD</Link>\n                        <ul className=\"line\">\n                            <li>\n                                <a onClick={this.toggleSearch}>\n                                    <SVG name=\"search\" width=\"2rem\" height=\"4rem\" color=\"#ffffff\" />\n                                    <div className=\"t-h\">search</div>\n                                </a>\n                            </li>\n                        </ul>\n\n                        <div className=\"right\">\n                            <ul className=\"line\">\n                                { this.props.isLoggedIn ? logoutButton : loginButton }\n                            </ul>\n                        </div>\n                    </div>\n                </nav>\n                <ReactCSSTransitionGroup \n                transitionName=\"search\" \n                transitionEnterTimeout={300} \n                transitionLeaveTimeout={300}>\n                    {this.state.search ? \n                        <Search \n                            onClose={this.toggleSearch}\n                            usernames={this.props.usernames}\n                            onSearch = {this.props.onSearch}\n                            searchStatus = {this.props.searchStatus}\n                        /> : undefined \n                    }\n                </ReactCSSTransitionGroup>\n            </div>\n        );\n    }\n}\n\nconst propTypes = {\n    isLoggedIn : PropTypes.bool, // 현재 로그인 상태인지 아닌지 알려주는 값\n    onLogout : PropTypes.func // 함수형 props 로서 로그아웃을 담당\n}\n\nconst warning = (funcName) => {\n    return () => console.warn(`${funcName} is not defined`);\n};\nconst defaultProps = {\n    isLoggedIn : false,\n    onLogout : warning('onLogout')\n};\n\nHeader.propTypes = propTypes;\nHeader.defaultProps = defaultProps;\n\nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from \"react-router-dom\";\n\nclass Authentication extends React.Component {\n\n    // state\n    constructor(props) {\n        super(props);\n        this.state = {\n            username : \"\",\n            password : \"\"\n        };\n        this.handleChange = this.handleChange.bind(this);\n        \n        // containers/auth/login 의 props \n        this.handleLogin = this.handleLogin.bind(this);\n        this.handleRegister = this.handleRegister.bind(this);\n\n        // 엔터키 작동\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n    }\n    handleChange(e) {\n        let nextState = {};\n        nextState[e.target.name] = e.target.value;\n        this.setState(nextState);\n    }\n\n    handleLogin() {\n        let id = this.state.username;\n        let pw = this.state.password;\n        \n        // Containers 의 props로 전달받은 onLogin 을 실행\n        this.props.onLogin(id, pw).then(\n            (success) => {\n                //  success 는 아까전에 Login 컴포넌트의 handleLogin 에서 리턴한 true/false 값\n                if(!success) {\n                    this.setState({\n                        password: ''\n                    });\n                }\n            }\n        );\n    }\n\n    handleRegister() {\n        let id = this.state.username;\n        let pw = this.state.password;\n        \n        this.props.onRegister(id, pw).then(\n            (result) => {\n                if(!result) {\n                    this.setState({\n                        username: '',\n                        password: ''\n                    });\n                }\n            }\n        );\n    }\n\n    handleKeyPress(e) {\n        if(e.charCode==13) {\n            if(this.props.mode) {\n                this.handleLogin();\n            } else {\n                this.handleRegister();\n            }\n        }\n    }\n\n    render() {\n\n        // common component\n        const inputBoxes = (\n            <div>\n                <div className=\"input-field col s12 username\">\n                    <label>Username</label>\n                    <input\n                        name=\"username\"\n                        type=\"text\"\n                        className=\"validate\"\n                        onChange={this.handleChange}\n                        value={this.state.username}\n                    />\n                </div>\n                <div className=\"input-field col s12\">\n                    <label>Password</label>\n                    <input\n                        name=\"password\"\n                        type=\"password\"\n                        className=\"validate\"\n                        onChange={this.handleChange}\n                        value={this.state.password}\n                        onKeyPress={this.handleKeyPress}\n                    />\n                </div>\n            </div>\n        );\n\n        // 로그인\n        const loginView = (\n            <div>\n                <div className=\"card-content\">\n                    <div className=\"row\">\n                        {inputBoxes}\n                        <a \n                            className=\"waves-effect waves-light btn\" \n                            onClick={this.handleLogin}>\n                            SUBMIT\n                        </a>\n                    </div>\n                </div>\n\n\n                <div className=\"footer\">\n                    <div className=\"card-content\">\n                        <div className=\"right\" >\n                        New Here? <Link to=\"/register\">Create an account</Link>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        );\n\n        // 회원가입\n        const registerView = (\n            <div className=\"card-content\">\n                <div className=\"row\">\n                    {inputBoxes}\n                    <a className=\"waves-effect waves-light btn\"\n                        onClick={this.handleRegister}>CREATE</a>\n                </div>\n            </div>\n        );\n\n        // Containers 의 props로 전달받은 this.props.mode 값\n        return (\n            <div className=\"container auth\">\n                <Link className=\"logo\" to=\"/\">MEMOPAD</Link>\n                <div className=\"card\">\n                    <div className=\"header blue white-text center\">\n                        <div className=\"card-content\">{this.props.mode ? \"LOGIN\" : \"REGISTER\"}</div>\n                    </div>\n                    {this.props.mode ? loginView : registerView }\n                </div>\n            </div>\n        );\n    }\n}\n\nconst propTypes = {\n    mode: PropTypes.bool,\n    onLogin: PropTypes.func,\n    onRegister: PropTypes.func\n};\nconst warning = (funcName) => {\n    return () => console.warn(`${funcName} is not defined`);\n}\nconst defaultProps = {\n    mode : true,\n    onLogin : warning('login'),\n    onRegister : warning('register'),\n};\n\nAuthentication.propTypes = propTypes;\nAuthentication.defaultProps = defaultProps;\n\nexport default Authentication;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Write extends React.Component {\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            contents : ''\n        };\n        this.hanldleChange = this.hanldleChange.bind(this);\n        this.handlePost = this.handlePost.bind(this);\n    }\n\n    hanldleChange(e) {\n        this.setState({\n            contents : e.target.value\n        });\n    }\n\n    handlePost() {\n        // 작성 완료시 초기화시키는 함수\n        let contents = this.state.contents;\n        \n        this.props.onPost(contents).then(\n            () => {\n                this.setState({\n                    contents : \"\"\n                    // 작성이 완료되면 내용을 비우는 함수\n                });\n            }\n        );\n    }\n\n    render() {\n\n        return (\n            <div className=\"container write\">\n                <div className=\"card\">\n                    <div className=\"card-content\">\n                        <textarea\n                            className=\"materialize-textarea\" \n                            placeholder=\"Write down your memo\"\n                            value = {this.state.contents}\n                            onChange = {this.hanldleChange}\n                        ></textarea>\n                    </div>\n                    <div className=\"card-action\">\n                        <a onClick={this.handlePost}>POST</a>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nWrite.propTypes = {\n    onPost: PropTypes.func\n};\n\nWrite.defaultProps = {\n    onPost: (contents) => { console.error('post function not defined'); }\n};\n\n\nexport default Write;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TimeAgo from 'react-timeago';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// SVG\r\nimport SVG from 'components/svg/SVG';\r\n\r\nexport default class Memo extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            editMode : false,\r\n            editText : props.data.contents\r\n        };\r\n\r\n        this.activeBtn      = this.activeBtn.bind(this);\r\n        this.toggleEdit     = this.toggleEdit.bind(this);\r\n        this.handleChange   = this.handleChange.bind(this);\r\n        this.handleRemove   = this.handleRemove.bind(this);\r\n        this.handleStar     = this.handleStar.bind(this);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        let current = {\r\n            props: this.props,\r\n            state: this.state\r\n        };\r\n        \r\n        let next = {\r\n            props: nextProps,\r\n            state: nextState\r\n        };\r\n        \r\n        let update = JSON.stringify(current) !== JSON.stringify(next);\r\n        return update;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // 컴포넌트가 리렌더링을 마친 후 실행됩니다.\r\n        // window.addEventListener('load',function(){\r\n        //     document.getElementById('dropdown-'+this.props.data._id).style.opacity = 1;\r\n        //     document.getElementById('dropdown-'+this.props.data._id).style.display = 'block';\r\n        // });\r\n    }\r\n\r\n    componentDidMount() {\r\n        // 컴포넌트가 만들어지고 첫 렌더링을 다 마친 후 실행되는 메소드입니다.\r\n        // 이 안에서 다른 JavaScript 프레임워크를 연동하거나,\r\n        // setTimeout, setInterval 및 AJAX 처리 등을 넣습니다.\r\n        // window.addEventListener('load',function(){\r\n        //     document.getElementById('dropdown-'+this.props.data._id).style.opacity = 1;\r\n        //     document.getElementById('dropdown-'+this.props.data._id).style.display = 'block';\r\n        // });\r\n    }\r\n\r\n    activeBtn() {\r\n        let btnBox = document.getElementById('dropdown-'+this.props.data._id);\r\n        \r\n        if(btnBox.style.display !== 'block') {\r\n            btnBox.style.opacity = 1;\r\n            btnBox.style.display = 'block';\r\n        } else {\r\n            btnBox.style.opacity = 0;\r\n            btnBox.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    toggleEdit() {\r\n        if(this.state.editMode) {\r\n            let id = this.props.data._id;\r\n            let index = this.props.index;\r\n            let contents = this.state.editText;\r\n            \r\n            this.props.onEdit(id, index, contents).then(() => {\r\n                this.setState({\r\n                    editMode: !this.state.editMode\r\n                });\r\n            })\r\n        } else {\r\n            this.setState({\r\n                editMode: !this.state.editMode\r\n            });   \r\n        }\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({\r\n            editText : e.target.value\r\n        });\r\n    }\r\n\r\n    handleRemove() {\r\n        let id = this.props.data._id;\r\n        let index = this.props.index;\r\n        this.props.onRemove(id, index);\r\n    }\r\n\r\n    handleStar() {\r\n        let id = this.props.data._id;\r\n        let index = this.props.index;\r\n        this.props.onStar(id, index); \r\n    }\r\n\r\n  render() {\r\n    // console.log(this.props.data);\r\n\r\n    const { data, ownership } = this.props;\r\n\r\n    // EDITED info\r\n    let editedInfo = (\r\n        <span style={{color: '#AAB5BC'}}> · Edited <TimeAgo date={this.props.data.date.edited} live={true}/></span>\r\n    );\r\n\r\n    const dropDownMenu = (\r\n        <div className=\"option-button\">\r\n            <a \r\n                className='dropdown-button'\r\n                id={`dropdown-button-${data._id}`}\r\n                data-activates={`dropdown-${data._id}`}\r\n                onClick={this.activeBtn}\r\n            >\r\n                <i className=\"material-icons icon-button\">more_vert</i>\r\n            </a>\r\n            <ul id={`dropdown-${data._id}`} className='dropdown-content'>\r\n                <li>\r\n                    <a onClick={this.toggleEdit}>Edit</a>\r\n                </li>\r\n                <li>\r\n                    <a onClick={this.handleRemove}>Remove</a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n\r\n    const editView = (\r\n        <div className=\"write\">\r\n            <div className=\"card\">\r\n                <div className=\"card-content\">\r\n                    <textarea\r\n                        className = \"materialize-textarea\"\r\n                        onChange = {this.handleChange}\r\n                        value = {this.state.editText}\r\n                    ></textarea>\r\n                </div>\r\n                <div className=\"card-action\">\r\n                    <a onClick={this.toggleEdit}>OK</a>\r\n                </div>\r\n            </div>\r\n        </div> \r\n    );\r\n\r\n    // 별표가있는 경우 (NICKNAME이 (가) ARRAY에 있는지 여부를 확인)\r\n    // 노란 색조를 가진 옷차림을 되찾아주세요.\r\n    // 해당 메모가 유저가 star을 한지 안한지 확인하려면, 배열의 indexOf 메소드를 통하여 \r\n    // starred 데이터에 로그인유저의 username이 적혀있는지 확인하면됩니다.\r\n    let starStyle = (this.props.data.starred.indexOf(this.props.currentUser) > -1) ? { color: '#ff9980' } : { color: '#e9e9e9' } ;\r\n    \r\n    const memoView = (\r\n        // 나중에 Edit 모드일때는 Write 와 비슷한 뷰를\r\n        // 보여주게 할 것이기 때문에 미리 작업을 한것입니다.\r\n        <div className=\"card\">\r\n            <div className=\"info\">\r\n                <Link \r\n                    to={`/wall/${this.props.data.writer}`} \r\n                    className=\"username\">{this.props.data.writer}\r\n                </Link> \r\n                wrote a log · <TimeAgo date={this.props.data.date.created}/> \r\n                { this.props.data.is_edited ? editedInfo : undefined }\r\n                { this.props.ownership ? dropDownMenu : undefined }\r\n            </div>\r\n            <div className=\"card-content\">\r\n                {data.contents}\r\n            </div>\r\n            <div className=\"footer\">\r\n                <a className=\"log-footer-icon icon-button star\" \r\n                    onClick={this.handleStar}\r\n                    href=\"#none\"\r\n                >\r\n                    <SVG name=\"star\" width=\"1.5rem\" height=\"1.5rem\" color={starStyle.color} />\r\n                    <div className=\"t-h\">star</div>\r\n                </a>\r\n\r\n                <span className=\"star-count\">{this.props.data.starred.length}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"container memo\">\r\n            { this.state.editMode ? editView : memoView }\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst propTypes = {\r\n    data: PropTypes.object,\r\n    ownership: PropTypes.bool,\r\n    onEdit: PropTypes.func,\r\n    onRemove: PropTypes.func,\r\n    index: PropTypes.number,\r\n    onStar: PropTypes.func,\r\n    currentUser: PropTypes.string\r\n};\r\n\r\nconst warning = (funcName) => {\r\n    return () => console.warn(`funcName is not defined`);\r\n}\r\nconst defaultProps = {\r\n    data: {\r\n        _id: 'id1234567890',\r\n        writer: 'Writer',\r\n        contents: 'Contents',\r\n        is_edited: false,\r\n        date: {\r\n            edited: new Date(),\r\n            created: new Date()\r\n        },\r\n        starred: []\r\n    },\r\n    ownership: true,\r\n    // ownership prop  은 해당 메모가 자신의 메모인지 \r\n    // 아닌지 여부를 확인하는 값입니다.\r\n    onEdit: (id, index, contents) => {\r\n        console.error('onEdit function not defined');\r\n    },\r\n    onRemove: (id, index) => {\r\n        console.error('onRemove function not defined');\r\n    },\r\n    index: -1,\r\n    currentUser: ''\r\n};\r\n\r\nMemo.propTypes = propTypes;\r\nMemo.defaultProps = defaultProps;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Memo } from 'components';\r\n\r\n/* action css */\r\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\r\nimport memoAction from 'style/memo-action.css';\r\n\r\nexport default class MemoList extends Component {\r\n    \r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        let update = JSON.stringify(this.props) !== JSON.stringify(nextProps);\r\n        return update;\r\n        // 위와 같이, 전달받은 props 값이 달라질때만 render() 메소드를\r\n        // 실행하도록 설정하면 위 문제들이 완화됩니다.\r\n    }\r\n\r\n    render() {\r\n        console.log('MemoList render method executed');\r\n\r\n        // Home 컴포넌트 받은 데이터 배열을 컴포넌트 매핑\r\n        const mapToComponents = data => {\r\n            return data.map((memo, i) => {\r\n                return (\r\n                    <Memo \r\n                        data={memo}\r\n                        ownership={ (memo.writer === this.props.currentUser) }\r\n                        key={memo._id}\r\n                        index={i}   // 해당 메모가 몇번째 메모인지 알려줍니다.\r\n                        onEdit={this.props.onEdit}\r\n                        onRemove={this.props.onRemove}\r\n                        onStar={this.props.onStar}\r\n                        currentUser={this.props.currentUser}  \r\n                        // currentUser props 도 전달되었습니다 (유저가 각 메모를 star 한지 안한지 여부를 확인하는데 사용됩니다)\r\n                    />\r\n                );\r\n            });\r\n        };\r\n\r\n        // 주의 { maptoComponents.this.props.data) } 를 다른 엘리먼트로 감싸면\r\n        // 애니메이션이 작동하지 않습니다\r\n        return (\r\n            <div>\r\n            <ReactCSSTransitionGroup \r\n                transitionName=\"memo\" \r\n                transitionEnterTimeout={2000}\r\n                transitionLeaveTimeout={1000}\r\n            >\r\n                {mapToComponents(this.props.data)}\r\n            </ReactCSSTransitionGroup>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst propTypes = {\r\n    data: PropTypes.array,\r\n    currentUser: PropTypes.string,\r\n    onEdit: PropTypes.func,\r\n    onRemove: PropTypes.func,\r\n    onStar: PropTypes.func,\r\n};\r\n\r\nconst warning = (funcName) => {\r\n    return () => console.warn(`funcName is not defined`);\r\n}\r\nconst defaultProps = {\r\n    data: [],\r\n    currentUser: '',\r\n    onEdit: (id, index, contents) => { \r\n        console.error('edit function not defined');     \r\n    },\r\n    onRemove: (id, index) => { \r\n        console.error('onRemove function not defined');     \r\n    },\r\n    onStar: (id, index) => { \r\n        console.error('onStar function not defined');     \r\n    }\r\n};\r\n\r\nMemoList.propTypes = propTypes;\r\nMemoList.defaultProps = defaultProps;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link, withRouter } from 'react-router-dom';\r\n\r\nclass Search extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            keyword : ''\r\n        };\r\n\r\n        this.handleClose = this.handleClose.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n        // input 박스에서 enter 키가 눌려지면 맨 위에있는 유저네임의 ‘담벼락’ 으로 이동\r\n\r\n        // ESC 키를 누르십시오. 눌렀을 때 닫습니다.\r\n        const listenEscKey = (evt) => {\r\n            evt = evt || window.event;\r\n            if (evt.keyCode == 27) {\r\n                this.handleClose();\r\n            }\r\n        };\r\n        // 인풋박스 뿐만아니라, 페이지 전체에서 ESC 키를 누르면 종료되도록 설정하였습니다.\r\n        document.onkeydown = listenEscKey;\r\n    }\r\n\r\n    handleClose() {\r\n        this.handleSearch('');\r\n        document.onkeydown = null;\r\n        // 종료될때는, document.onkeydown 을 null로 지정하여 리스너를 해제합니다.\r\n        this.props.onClose();\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({\r\n            keyword: e.target.value\r\n        });\r\n        this.handleSearch(e.target.value);\r\n    }\r\n\r\n    handleSearch(keyword) {\r\n        // TO BE IMPLEMENTED\r\n        this.props.onSearch(keyword);\r\n    }\r\n\r\n    handleKeyDown = (e) => {\r\n        // PRESSED ENTER를 누르면 트리거가 첫 번째 사용자에게 네비게이션 할 수 있습니다.\r\n        if(e.keyCode === 13) {\r\n            if(this.props.usernames.length > 0) {\r\n                this.handleClose();\r\n                this.props.history.push('/wall/' + this.props.usernames[0].username);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n    const mapDataToLinks = (data) => {\r\n        // IMPLEMENT: map data array to array of Link components\r\n        // create Links to '/wall/:username'\r\n        \r\n        return data.map((user, i) => {\r\n            // console.log(user);\r\n            // console.log(users.username+'유저');\r\n            // console.log(i+'index');\r\n            return(\r\n                <Link to={`/wall/${user.username}`} key={i}>{user.username}</Link>\r\n            );\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"search-screen white-text\">\r\n            <div className=\"right\">\r\n                <a \r\n                    className=\"waves-effect waves-light btn red lighten-1\"\r\n                    onClick={this.handleClose}\r\n                >\r\n                    CLOSE\r\n                </a>\r\n            </div>\r\n            <div className=\"container\">\r\n                <input placeholder=\"Search a user\"\r\n                    value={this.state.keyword}\r\n                    onChange={this.handleChange}\r\n                    onKeyDown={this.handleKeyDown}\r\n                />\r\n                <ul className=\"search-results\">\r\n                    { mapDataToLinks(this.props.usernames) }\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst propTypes = {\r\n    onClose: PropTypes.func,\r\n    onSearch: PropTypes.func,\r\n    usernames: PropTypes.array\r\n};\r\n    \r\nconst warning = (funcName) => {\r\n    return () => console.warn(`${funcName} is not defined`);\r\n    }\r\nconst defaultProps = {\r\n    onClose : warning('onClose'),\r\n    onSearch : warning('onSearch'),\r\n    usernames: []\r\n};\r\n\r\nSearch.propTypes = propTypes;\r\nSearch.defaultProps = defaultProps;\r\n\r\nexport default withRouter(Search);","import { createAction, handleActions } from 'redux-actions';\r\nimport update from 'react-addons-update';\r\n\r\n/* ----- AUTHENTICATION */\r\n\r\n// 액션 타입을 정의해줍니다.\r\n// Login\r\nconst AUTH_LOGIN = \"auth/AUTH_LOGIN\";\r\nconst AUTH_LOGIN_SUCCESS = \"auth/AUTH_LOGIN_SUCCESS\";\r\nconst AUTH_LOGIN_FAILURE = \"auth/AUTH_LOGIN_FAILURE\";\r\n// Register\r\nconst AUTH_REGISTER = \"auth/AUTH_REGISTER\";\r\nconst AUTH_REGISTER_SUCCESS = \"auth/AUTH_REGISTER_SUCCESS\";\r\nconst AUTH_REGISTER_FAILURE = \"auth/AUTH_REGISTER_FAILURE\";\r\n\r\n// State View 상태표시\r\nconst AUTH_GET_STATUS = \"auth/AUTH_GET_STATUS\";\r\nconst AUTH_GET_STATUS_SUCCESS = \"auth/AUTH_GET_STATUS_SUCCESS\";\r\nconst AUTH_GET_STATUS_FAILURE = \"auth/AUTH_GET_STATUS_FAILURE\";\r\n\r\n// Logout\r\nconst AUTH_LOGOUT = \"auth/AUTH_LOGOUT\";\r\n\r\n// 액션 생성 함수를 만듭니다.\r\nexport const auth_login = createAction(AUTH_LOGIN);\r\nexport const auth_login_success = createAction(AUTH_LOGIN_SUCCESS);\r\nexport const auth_login_failure = createAction(AUTH_LOGIN_FAILURE);\r\n\r\nexport const auth_register = createAction(AUTH_REGISTER);\r\nexport const auth_register_success = createAction(AUTH_REGISTER_SUCCESS);\r\nexport const auth_register_failure = createAction(AUTH_REGISTER_FAILURE);\r\n\r\nexport const auth_get_status = createAction(AUTH_GET_STATUS);\r\nexport const auth_get_status_success = createAction(AUTH_GET_STATUS_SUCCESS);\r\nexport const auth_get_status_failure = createAction(AUTH_GET_STATUS_FAILURE);\r\n\r\nexport const auth_logout = createAction(AUTH_LOGOUT);\r\n\r\n// 모듈의 초기 상태를 정의합니다.\r\nconst initialState = {\r\n    login: {\r\n        status: 'INIT'\r\n    },\r\n    register : {\r\n        status : 'INIT',\r\n        error : -1\r\n    },\r\n    status: {\r\n        valid: false,\r\n        isLoggedIn: false,\r\n        currentUser: '',\r\n    }\r\n};\r\n\r\nexport default handleActions({\r\n    /* ----- Login */\r\n    [AUTH_LOGIN] : (state) => {\r\n        return update(state, {\r\n            login: {\r\n                status: { $set: 'WAITING' }\r\n                // 로그인 중이라면 status 를 waiting 으로 변경 아래도 같음\r\n            }\r\n        });\r\n    },\r\n    [AUTH_LOGIN_SUCCESS] : (state, action) => {\r\n        return update(state, {\r\n            login: {\r\n                status: { $set: 'SUCCESS' }\r\n            },\r\n            status: {\r\n                isLoggedIn: { $set: true },\r\n                currentUser: { $set: action.username }\r\n            }\r\n        });\r\n    },\r\n    [AUTH_LOGIN_FAILURE] : (state) => {\r\n        return update(state, {\r\n            login: {\r\n                status: { $set: 'FAILURE' }\r\n            }\r\n        });    \r\n    },\r\n    /* ----- Register */\r\n    [AUTH_REGISTER] : (state) => {\r\n        return update(state, {\r\n            register: {\r\n                status: { $set: 'WAITING' },\r\n                error: { $set: -1 }\r\n            }\r\n        });\r\n    },\r\n    [AUTH_REGISTER_SUCCESS] : (state) => {\r\n        return update(state, {\r\n            register: {\r\n                status: { $set: 'SUCCESS' }\r\n            }\r\n        });\r\n    },\r\n    [AUTH_REGISTER_FAILURE] : (state, action) => {\r\n        return update(state, {\r\n            register: {\r\n                status: { $set: 'FAILURE' },\r\n                error: { $set: action.error }\r\n            }\r\n        });\r\n    },\r\n    /* ----- State View */\r\n    [AUTH_GET_STATUS] : (state) => {\r\n        return update(state, {\r\n            status: {\r\n                isLoggedIn: { $set: true }\r\n            }\r\n        });\r\n    },\r\n    [AUTH_GET_STATUS_SUCCESS] : (state, action) => {\r\n        return update(state, {\r\n            status: {\r\n                valid: { $set: true },\r\n                currentUser: { $set: action.username }\r\n            }\r\n        });\r\n    },\r\n    [AUTH_GET_STATUS_FAILURE] : (state) => {\r\n        return update(state, {\r\n            status: {\r\n                valid: { $set: false },\r\n                isLoggedIn: { $set: false }\r\n            }\r\n        });\r\n    },\r\n    /* ----- Logout */\r\n    [AUTH_LOGOUT] : (state) => {\r\n        return update(state, {\r\n            status : {\r\n                isLoggedIn: { $set: false },\r\n                currentUser: { $set: '' }\r\n            }\r\n        });\r\n    }\r\n  }, initialState);","import * as types from './auth';\r\nimport axios from 'axios';\r\n\r\n/*============================================================================\r\n    authentication\r\n==============================================================================*/\r\n\r\n/* ----- Login */\r\nexport function loginRequest(username, password) {\r\n    // 이런식으로 thunk 내부에서 다른 action 을 dispatch 할 수 있어요.\r\n    // dispatch 는 보내다 라는 뜻으로 무언가 전송할때 사용\r\n    return (dispatch) => {\r\n        // Inform Login API is starting\r\n        // dispatch보내기 함수로 login 액션을 보냅니다.\r\n        dispatch(login());\r\n\r\n        // 우선 reduser 로 액션이보내집니다.\r\n        // reduser 에서 액션 변경이 감지되어 변경된 값을 다시 여기로 받습니다.\r\n\r\n        // API REQUEST\r\n        return axios.post('/api/account/signin', { username, password })\r\n        .then((response) => {\r\n            // SUCCEED\r\n            dispatch(loginSuccess(username));\r\n        }).catch((error) => {\r\n            // FAILED\r\n            dispatch(loginFailure());\r\n        });\r\n    };\r\n}\r\nexport function login() {\r\n    return {\r\n        type: types.auth_login\r\n    };\r\n}\r\n\r\nexport function loginSuccess(username) {\r\n    return {\r\n        type: types.auth_login_success,\r\n        username\r\n    };\r\n}\r\n\r\nexport function loginFailure() {\r\n    return {\r\n        type: types.auth_login_failure\r\n    };\r\n}\r\n\r\n/* ----- Register */\r\n\r\nexport function registerRequest(username, password) {\r\n    return(dispatch) => {\r\n        // Inform Register API is starting\r\n        dispatch(register());\r\n\r\n        return axios.post('/api/account/signup', { username, password })\r\n        .then((response) => {\r\n            dispatch(registerSuccess());\r\n        }).catch((error) => {\r\n            dispatch(registerFailure(error.response.data.code));\r\n        });\r\n    }\r\n}\r\n\r\nexport function register() {\r\n    return {\r\n        type : types.auth_register\r\n    };\r\n}\r\n\r\nexport function registerSuccess() {\r\n    return {\r\n        type : types.auth_register_success,\r\n    };\r\n}\r\n\r\nexport function registerFailure(error) {\r\n    return {\r\n        type : types.auth_register_failure,\r\n        error\r\n    };\r\n}\r\n\r\n/* ----- GET STATUS */\r\nexport function getStatusRequest() {\r\n    return (dispatch) => {\r\n        // inform Get Status API is starting\r\n        dispatch(getStatus());\r\n\r\n        return axios.get('/api/account/getInfo')\r\n        .then((response) => {\r\n            dispatch(getStatusSuccess(response.data.info.username));\r\n        }).catch((error) => {\r\n            dispatch(getStatusFailure());\r\n        });\r\n    };\r\n}\r\n\r\nexport function getStatus() {\r\n    return {\r\n        type: types.auth_get_status\r\n    };\r\n}\r\n\r\nexport function getStatusSuccess(username) {\r\n    return {\r\n        type: types.auth_get_status_success,\r\n        username\r\n    };\r\n}\r\n\r\nexport function getStatusFailure() {\r\n    return {\r\n        type: types.auth_get_status_failure\r\n    };\r\n}\r\n\r\n/* ----- Logout */\r\n\r\nexport function logoutRequest() {\r\n    return (dispatch) => {\r\n        return axios.post('/api/account/logout')\r\n        .then((response) => {\r\n            dispatch(logout());\r\n        });\r\n    };\r\n}\r\n\r\nexport function logout() {\r\n    return {\r\n        type : types.auth_logout\r\n    }\r\n}\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport update from 'react-addons-update';\r\n\r\n/* ----- Memo Search */\r\n\r\nconst SEARCH = \"search/SEARCH\";\r\nconst SEARCH_SUCCESS = \"search/SEARCH_SUCCESS\";\r\nconst SEARCH_FAILURE = \"search/SEARCH_FAILURE\";\r\n\r\nexport const search = createAction(SEARCH);\r\nexport const search_success = createAction(SEARCH_SUCCESS);\r\nexport const search_failure = createAction(SEARCH_FAILURE);\r\n\r\nconst initialState = {\r\n    searchHead : {\r\n        status : 'INIT',\r\n        usernames: []\r\n    }\r\n}\r\n\r\nexport default handleActions({\r\n    [SEARCH] : (state) => {\r\n        return update(state, {\r\n            searchHead : {\r\n                status : { $set : 'WAITING' },\r\n                usernames : { $set : [] }\r\n            }\r\n        });\r\n    },\r\n    [SEARCH_SUCCESS] : (state, action) => {\r\n        // console.log(action);\r\n        return update(state, {\r\n            searchHead : {\r\n                status : { $set : 'SUCCESS' },\r\n                usernames : { $set : action.username }\r\n            }\r\n        });\r\n    },\r\n    [SEARCH_FAILURE] : (state, action) => {\r\n        return update(state, {\r\n            searchHead : {\r\n                status : { $set : 'FAILURE' },\r\n                error : { $set : action.error }\r\n            }    \r\n        });\r\n    }\r\n}, initialState);","import * as types from './search';\r\nimport axios from 'axios';\r\nimport es6promise from 'es6-promise';\r\nes6promise.polyfill();\r\n\r\n/* ----- Memo Search */\r\n// search.js 로 전송\r\n\r\nexport function searchRequest(username) {\r\n    return (dispath) => {\r\n        dispath(search());\r\n\r\n        return axios.get('/api/account/search/' + username )\r\n        .then((response) => {\r\n            // console.log(response.data);\r\n            // 서버에서 응답한 response 을 통하여 자료를 수집\r\n            dispath(searchSuccess(response.data));\r\n        }).catch((error) => {\r\n            dispath(searchFailure(error.response.data.code));\r\n        });\r\n    }\r\n}\r\n\r\nexport function search() {\r\n    return {\r\n        type : types.search\r\n    }\r\n}\r\n\r\nexport function searchSuccess(username) {\r\n    return {\r\n        type : types.search_success,\r\n        username\r\n    }\r\n}\r\n\r\nexport function searchFailure() {\r\n    return {\r\n        type : types.search_failure\r\n    }\r\n}","import React from 'react';\nimport { Route, withRouter } from \"react-router-dom\";\nimport { Header } from 'components';\nimport { Home, Login, Register, Wall } from './';\n\nimport { connect } from 'react-redux';\nimport { getStatusRequest, logoutRequest } from 'module/auth_api';\nimport { searchRequest } from 'module/search_api';\n\nimport $ from 'jquery';\nimport Materialize from 'materialize-css';\n\nimport style from '../style/style.css';\n\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleLogout = this.handleLogout.bind(this);\n    }\n\n    componentDidMount() {\n        // get cookie by name\n        function getCookie(name) {\n            var value = \"; \" + document.cookie;\n            var parts = value.split(\"; \" + name + \"=\");\n            if (parts.length == 2) return parts.pop().split(\";\").shift();\n        }\n\n        // get loginData from cookie\n        let loginData = getCookie('key');\n\n        // if loginData is undefined, do nothing\n        if(typeof loginData === \"undefined\") return;\n\n        // decode base64 & parse json\n        loginData = JSON.parse(atob(loginData));\n\n        // if not logged in, do nothing\n        if(!loginData.isLoggedIn) return;\n\n        // page refreshed & has a session in cookie,\n        // check whether this cookie is valid or not\n        this.props.getStatusRequest().then(\n            () => {\n                console.log(this.props.status);\n                // if session is not valid\n                if(!this.props.status.valid) {\n                    // logout the session\n                    loginData = {\n                        isLoggedIn: false,\n                        username: ''\n                    };\n\n                    document.cookie='key=' + btoa(JSON.stringify(loginData));\n\n                    // and notify\n                    let $toastContent = $('<span style=\"color: #FFB4BA\">Your session is expired, please log in again</span>');\n                    Materialize.toast($toastContent, 4000);\n\n                }\n            }\n        );\n    }\n\n    handleLogout() {\n        this.props.logoutRequest().then(\n            () => {\n                Materialize.toast('Good Bye!', 2000);\n\n                // EMPTIES THE SESSION\n                let loginData = {\n                    isLoggedIn: false,\n                    username: ''\n                };\n\n                document.cookie = 'key=' + btoa(JSON.stringify(loginData));\n            }\n        );\n    }\n\n    handleSearch = (username) => {\n        return this.props.searchRequest(username).then(\n            () => {\n                if( this.props.searchStatus !== 'SUCCESS') {\n                    // console.log(JSON.stringify(this.props.searchUsers, null, 4) + '서치');\n\n                    /*\n                        ERROR CODES\n                            1: INVALID ID,\n                            2: EMPTY CONTENTS\n                            3: NOT LOGGED IN\n                            4: NO RESOURCE\n                            5: PERMISSION FAILURE\n                    */\n                    let errorMessage = '검색에 오류가 있습니다.';\n                    // NOTIFY ERROR\n                    console.log(errorMessage);\n                }\n\n            }\n        );\n    }\n\n    render() {\n\n        /* Check whether current route is login or register using regex */\n        let re = /(login|register)/;\n        let isAuth = re.test(this.props.location.pathname);\n\n        return (\n            <div>\n                {\n                    isAuth ? undefined : \n                    <Header \n                        isLoggedIn={this.props.status.isLoggedIn}\n                        onLogout={this.handleLogout}\n                        onSearch = {this.handleSearch}\n                        usernames = {this.props.searchUsers}\n                        searchStatus = {this.props.searchStatus}\n                    />\n                }\n                <Route exact path=\"/\" component={Home} />\n                <Route path=\"/home/\" component={Home} />\n                <Route path=\"/login/\" component={Login} />\n                <Route path=\"/register/\" component={Register} />\n                <Route path=\"/wall/:username\" component={Wall}/>\n            </div>\n        );\n        // usernames = {this.props.searchUsers} component 외부에서  this.props. 를 붙인다.\n    }\n}\n\nconst mapStateToProps = (state) => {\n    // console.log(JSON.stringify(state.search.status, null, 4));   x\n    // console.log(JSON.stringify(state.search.searchHead.status, null, 4));   O\n    // state 의 search 파일의 search 속성의 status를 불러옴\n    \n    return {\n        status : state.authentication.status,\n        searchUsers : state.search.searchHead.usernames,\n        searchStatus : state.search.searchHead.status\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        getStatusRequest: () => {\n            return dispatch(getStatusRequest());\n        },\n        logoutRequest: () => {\n            return dispatch(logoutRequest());\n        },\n        searchRequest : (username) => {\n            return dispatch(searchRequest(username));\n        }\n    };\n};\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(App)\n);","import { createAction, handleActions } from 'redux-actions';\r\nimport update from 'react-addons-update';\r\n\r\n/* ----- MEMO */\r\nconst MEMO_POST                 = \"memo/MEMO_POST\";\r\nconst MEMO_POST_SUCCESS         = \"memo/MEMO_POST_SUCCESS\";\r\nconst MEMO_POST_FAILURE         = \"memo/MEMO_POST_FAILURE\";\r\n\r\nexport const memo_post          = createAction(MEMO_POST);\r\nexport const memo_post_success  = createAction(MEMO_POST_SUCCESS);\r\nexport const memo_post_failure  = createAction(MEMO_POST_FAILURE);\r\n\r\n/* ----- MEMOLIST */\r\nconst MEMO_LIST                 = \"memo/MEMO_LIST\";\r\nconst MEMO_LIST_SUCCESS         = \"memo/MEMO_LIST_SUCCESS\";\r\nconst MEMO_LIST_FAILURE         = \"memo/MEMO_LIST_FAILURE\";\r\n\r\nexport const memo_list          = createAction(MEMO_LIST);\r\nexport const memo_list_success  = createAction(MEMO_LIST_SUCCESS);\r\nexport const memo_list_failure  = createAction(MEMO_LIST_FAILURE);\r\n\r\n/* ----- MEMOEDIT */\r\nconst MEMO_EDIT                 = \"memo/MEMO_EDIT\";\r\nconst MEMO_EDIT_SUCCESS         = \"memo/MEMO_EDIT_SUCCESS\";\r\nconst MEMO_EDIT_FAILURE         = \"memo/MEMO_EDIT_FAILURE\";\r\n\r\nexport const memo_edit          = createAction(MEMO_EDIT);\r\nexport const memo_edit_success  = createAction(MEMO_EDIT_SUCCESS);\r\nexport const memo_edit_failure  = createAction(MEMO_EDIT_FAILURE);\r\n\r\n/* ----- MEMOREMOVE */\r\nconst MEMO_REMOVE               = \"memo/MEMO_REMOVE\";\r\nconst MEMO_REMOVE_SUCCESS       = \"memo/MEMO_REMOVE_SUCCESS\";\r\nconst MEMO_REMOVE_FAILURE       = \"memo/MEMO_REMOVE_FAILURE\";\r\n\r\nexport const memo_remove            = createAction(MEMO_REMOVE);\r\nexport const memo_remove_success    = createAction(MEMO_REMOVE_SUCCESS);\r\nexport const memo_remove_failure    = createAction(MEMO_REMOVE_FAILURE);\r\n\r\n/* ----- MEMOSTAR */\r\nconst MEMO_STAR                 = \"memo/MEMO_STAR\";\r\nconst MEMO_STAR_SUCCESS         = \"memo/MEMO_STAR_SUCCESS\";\r\nconst MEMO_STAR_FAILURE         = \"memo/MEMO_STAR_FAILURE\";\r\n\r\nexport const memo_star          = createAction(MEMO_STAR);\r\nexport const memo_star_success  = createAction(MEMO_STAR_SUCCESS);\r\nexport const memo_star_failure  = createAction(MEMO_STAR_FAILURE);\r\n\r\nconst initialState = {\r\n    post: {\r\n        status: 'INIT',\r\n        error: -1\r\n    },\r\n    list: {\r\n        status: 'INIT',\r\n        data: [],\r\n        isLast: false\r\n    },\r\n    edit: {\r\n        status: 'INIT',\r\n        error: -1\r\n    },\r\n    remove : {\r\n        status : 'INIT',\r\n        error : -1\r\n    },\r\n    star : {\r\n        status : 'INIT',\r\n        error : -1\r\n    }\r\n};\r\n\r\nexport default handleActions({\r\n    /* ----- Memo Post */\r\n    [MEMO_POST] : (state) => {\r\n        return update(state, {\r\n            post : {\r\n                status : { $set : 'WAITING' },\r\n                error: { $set: -1 }\r\n            }\r\n        });\r\n    },\r\n    [MEMO_POST_SUCCESS] : (state) => {\r\n        return update(state, {\r\n            post : {\r\n                status : { $set : 'SUCCESS' }\r\n            }\r\n        });\r\n    },\r\n    [MEMO_POST_FAILURE] : (state, action) => {\r\n        return update(state, {\r\n            post : {\r\n                status : { $set : 'FAILURE' },\r\n                error: { $set: action.error }\r\n            }\r\n        });\r\n    },\r\n    /* ----- Memo List */\r\n    [MEMO_LIST] : (state) => {\r\n        return update(state, {\r\n            list: {\r\n                status: { $set: 'WAITING' },\r\n            }\r\n        });\r\n    },\r\n    [MEMO_LIST_SUCCESS] : (state,action) => {\r\n        if(action.isInitial) {\r\n            return update(state, {\r\n                list: {\r\n                    status: { $set: 'SUCCESS' },\r\n                    data: { $set: action.data },\r\n                    isLast: { $set: action.data.length < 6 }\r\n                    // isLast 값은 현재 로딩된 페이지가 마지막페이지인지 아닌지 알려줍니다.\r\n                    // 한 페이지에 6개의 메모를 보여주는데요, 로드한 메모가 6개 미만이라면,\r\n                    // 더 이상 메모가 없다는것을 의미합니다.\r\n                }\r\n            });\r\n        } else {\r\n            if(action.listType === 'new') {\r\n                return update(state, {\r\n                    list: {\r\n                        status: { $set: 'SUCCESS' },\r\n                        data: { $unshift: action.data },\r\n                    }\r\n                });\r\n            } else {\r\n                return update(state, {\r\n                    list: {\r\n                        status: { $set: 'SUCCESS' },\r\n                        data: { $push: action.data },\r\n                        isLast: { $set: action.data.length < 6 }\r\n                    }\r\n                });    \r\n            }\r\n        }\r\n    },\r\n    [MEMO_LIST_FAILURE] : (state) => {\r\n        return update(state, {\r\n            list: {\r\n                status: { $set: 'FAILURE' }\r\n            }\r\n        });\r\n    },\r\n    /* ----- Memo Edit */\r\n    [MEMO_EDIT] : (state) => {\r\n        return update(state, {\r\n            edit: {\r\n                status: { $set: 'WAITING' },\r\n                error: { $set: -1 },\r\n                memo: { $set: undefined }\r\n            }\r\n        });\r\n    },\r\n    [MEMO_EDIT_SUCCESS] : (state, action) => {\r\n        return update(state, {\r\n            edit: {\r\n                status: { $set: 'SUCCESS' }\r\n            },\r\n            list: {\r\n                data: { \r\n                    [action.index]: { $set: action.memo }\r\n                    //  list 의 데이터 중 [action.index] 번째 데이터를 새로운 데이터로 교체합니다.\r\n                }\r\n            }\r\n        });\r\n    },\r\n    [MEMO_EDIT_FAILURE] : (state, action) => {\r\n        return update(state, {\r\n            edit: {\r\n                status: { $set: 'FAILURE' },\r\n                error: { $set: action.error }\r\n            }\r\n        });\r\n    },\r\n    /* ----- Memo Remove */\r\n    [MEMO_REMOVE] : (state) => {\r\n        console.log('리듀서');\r\n        return update(state, {\r\n            remove: {\r\n                status: { $set : 'WAITING' }\r\n            }\r\n        });\r\n    },\r\n    [MEMO_REMOVE_SUCCESS] : (state,action) => {\r\n        return update(state, {\r\n            remove : {\r\n                status : { $set : 'SUCCESS' }\r\n            },\r\n            list : {\r\n                data: { $splice: [[action.index, 1]] }\r\n            }\r\n        });\r\n    },\r\n    [MEMO_REMOVE_FAILURE] : (state, action) => {\r\n        return update(state, {\r\n            remove: {\r\n                status : { $set : 'FAILURE' },\r\n                error : { $set : action.error }\r\n            }\r\n        });\r\n    },\r\n    [MEMO_STAR] : (state) => {\r\n        return update(state, {\r\n            star : {\r\n                status : { $set : 'WAITING' },\r\n                error: { $set: -1 }\r\n            }\r\n        });\r\n    },\r\n    [MEMO_STAR_SUCCESS] : (state, action) => {\r\n        return update(state, {\r\n            star : {\r\n                status : { $set : 'SUCCESS' }\r\n            },\r\n            list: {\r\n                data: {\r\n                    [action.index]: { $set: action.memo }\r\n                }\r\n            }\r\n        });\r\n    },\r\n    [MEMO_STAR_FAILURE] : (state, action) => {\r\n        return update(state, {\r\n            star : {\r\n                status : { $set : 'FAILURE' },\r\n                error : { $set : action.error }\r\n            }\r\n        });\r\n    },\r\n},initialState)","import * as types from './memo';\r\nimport axios from 'axios';\r\n\r\n/*============================================================================\r\n    memo\r\n==============================================================================*/\r\n\r\n/* ----- Memo */\r\nexport function memoPostRequest(contents) {\r\n    return (dispatch) => {\r\n        // inform MEMO POST API is starting\r\n        dispatch(memoPost());\r\n\r\n        return axios.post('/api/memo/', { contents })\r\n        .then((response) => {\r\n            dispatch(memoPostSuccess());\r\n        }).catch((error) => {\r\n            dispatch(memoPostFailure(error.response.data.code));\r\n        });\r\n    }\r\n}\r\nexport function memoPost() {\r\n    return {\r\n        type: types.memo_post\r\n    }\r\n}\r\n\r\nexport function memoPostSuccess() {\r\n    return {\r\n        type: types.memo_post_success\r\n    }\r\n}\r\n\r\nexport function memoPostFailure(error) {\r\n    return {\r\n        type: types.memo_post_failure,\r\n        error\r\n    }\r\n}\r\n\r\n/* ----- Memo List */\r\nexport function memoListRequest(isInitial, listType, id, username) {\r\n    return (dispatch) => {\r\n        // inform memo list API is starting\r\n        dispatch(memoList());\r\n        \r\n        let url = '/api/memo';\r\n        \r\n        if(typeof username===\"undefined\") {\r\n            // username not given, load public memo\r\n            url = isInitial ? url : `${url}/${listType}/${id}`;\r\n            // or url + '/' + listType + '/' +  id\r\n        } else {\r\n            // load memos of specific user\r\n            url = isInitial ? `${url}/${username}` : `${url}/${username}/${listType}/${id}`;\r\n        }\r\n          \r\n        return axios.get(url)\r\n        .then((response) => {\r\n            dispatch(memoListSuccess(response.data, isInitial, listType));\r\n        }).catch((error) => {\r\n            dispatch(memoListFailure());\r\n        });\r\n    }\r\n}\r\n\r\nexport function memoList() {\r\n    return {\r\n        type: types.memo_list\r\n    }\r\n}\r\n\r\nexport function memoListSuccess(data, isInitial, listType) {\r\n    return {\r\n        type: types.memo_list_success,\r\n        data,\r\n        isInitial,\r\n        listType\r\n    }\r\n}\r\n\r\nexport function memoListFailure() {\r\n    return {\r\n        type: types.memo_list_failure\r\n    }\r\n}\r\n\r\n/* ----- Memo Edit */\r\nexport function memoEditRequest(id, index, contents) {\r\n    return (dispatch) => {\r\n        dispatch(memoEdit());\r\n        \r\n        return axios.put('/api/memo/' + id, {contents})\r\n        .then((response) => {\r\n            dispatch(memoEditSuccess(index, response.data.memo));\r\n        }).catch((error) => {\r\n            dispatch(memoEditFailure(error.response.data.code));\r\n        });\r\n    }\r\n}\r\n\r\nexport function memoEdit() {\r\n    return {\r\n        type : types.memo_edit\r\n    }\r\n}\r\n\r\nexport function memoEditSuccess(index, memo) {\r\n    return {\r\n        type : types.memo_edit_success,\r\n        index,\r\n        memo\r\n    }\r\n}\r\n\r\nexport function memoEditFailure(error) {\r\n    return {\r\n        type : types.memo_edit_failure,\r\n        error\r\n    }\r\n}\r\n\r\n/* ----- Memo Remove */\r\n\r\nexport function memoRemoveRequest(id, index) {\r\n    return (dispatch) => {\r\n        dispatch(memoRemove());\r\n        console.log('보냄');\r\n        return axios.delete('/api/memo/' + id)\r\n        .then((response) => {\r\n            console.log('성공');\r\n            dispatch(memoRemoveSuccess(index));\r\n        }).catch((error) => {\r\n            dispatch(memoRemoveFailure(error.response.data.code));\r\n        });\r\n    }\r\n}\r\n\r\nexport function memoRemove() {\r\n    return {\r\n        type : types.memo_remove\r\n    };    \r\n}\r\n\r\nexport function memoRemoveSuccess(index) {\r\n    return {\r\n        type : types.memo_remove_success,\r\n        index\r\n    }      \r\n}\r\n\r\nexport function memoRemoveFailure(error) {\r\n    return {\r\n        type : types.memo_remove_failure,\r\n        error\r\n    }  \r\n}\r\n\r\n/* ----- Memo Star */\r\nexport function memoStarRequest(id, index) {\r\n    return (dispatch) => {\r\n        dispatch(memoStar());\r\n\r\n        return axios.post('/api/memo/star/' + id)\r\n        .then((response) => {\r\n            dispatch(memoStarSuccess(index, response.data.memo))\r\n        }).catch((error) => {\r\n            dispatch(memoStarFailure(error.response.data.code));\r\n        });\r\n    }\r\n}\r\n\r\nexport function memoStar() {\r\n    return {\r\n        type : types.memo_star\r\n    }\r\n}\r\n\r\nexport function memoStarSuccess(index, memo) {\r\n    return {\r\n        type : types.memo_star_success,\r\n        index,\r\n        memo\r\n    }\r\n}\r\n\r\nexport function memoStarFailure(error) {\r\n    return {\r\n        type : types.memo_star_failure,\r\n        error\r\n    }\r\n}","// src/containers/Home.js\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withRouter } from \"react-router-dom\";\n\nimport { Write, MemoList } from 'components';\nimport { \n    memoPostRequest,\n    memoListRequest,\n    memoEditRequest,\n    memoRemoveRequest,\n    memoStarRequest\n} from 'module/memo_api';\n\nimport es6promise from 'es6-promise';\nes6promise.polyfill();\n\nclass Home extends React.Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.handlePost           = this.handlePost.bind(this);\n\n        this.loadNewMemo          = this.loadNewMemo.bind(this);\n        this.loadOldMemo          = this.loadOldMemo.bind(this); \n        this.componentWillUnmount = this.componentWillUnmount.bind(this); \n        this.componentDidMount    = this.componentDidMount.bind(this); \n        this.scrollEvent          = this.scrollEvent.bind(this);\n        this.handleEdit           = this.handleEdit.bind(this);\n        this.handleRemove         = this.handleRemove.bind(this);\n        this.handleStar           = this.handleStar.bind(this);\n\n        this.state = {\n            loadingState: false,\n            // 스크롤이 아래 조건문 구간에 들어갔을때 \n            // 처음에만 한번 코드를 실행하게 해야하는데\n            // loadingState state 를 활용하여 해결\n            initiallyLoaded: false\n            // initiallyLoaded 라는 값을 만들어서, 이 값이 true 일때만\n            // 해당 메시지를 보여주도록 설정을 합시다.\n        };\n    }\n    \n    handlePost(contents) {\n        return this.props.memoPostRequest(contents).then(\n            () => {\n                if(this.props.postStatus.status === \"SUCCESS\") { \n                // mapStateToProps 로 리듀서 연결한 값을 가져온것을\n                // memo.post 의 status 값을 가져옵니다.\n                this.loadNewMemo().then(\n                    // 글이 작성되면 loadNewMemo 함수로 api 호출 리스트 불러옴\n                    () => {\n                        console.log('글을 작성하였습니다.');\n                    }\n                );\n                } else {\n                    switch(this.props.postStatus.error) {\n                        case 1:\n                            console.log('로그인을 해주세요!');\n                            break;\n                        case 2:\n                            console.log('무언가 작성해주세요!');\n                            break;\n                        default:\n                            console.log('오류가 있습니다.\\n다시 작성해주세요');\n                            break;\n                    }\n                }\n            }\n        );\n    }\n    \n    scrollEvent() {\n        let documentH = document.documentElement.scrollHeight;\n        let windowH = window.innerHeight;\n        let windowScroll = window.scrollY;\n        let total = documentH - windowH - windowScroll;\n        // console.log(`\n        //     documentH : ${documentH}\n        //     windowH : ${windowH}\n        //     windowScroll : ${windowScroll}\n        //     all : ${total}\n        // `)\n        if( total < 150 ) {\n            if(!this.state.loadingState){\n                console.log(\"LOAD NOW\");\n                this.loadOldMemo();\n                this.setState({\n                    loadingState : false\n                });\n            } else {\n                if(this.state.loadingState){\n                    this.setState({\n                        loadingState: false\n                    });\n                }\n            }\n        }\n    }\n\n    componentDidMount() {\n        // LOAD NEW MEMO EVERY 5 SECONDS\n        const loadMemoLoop = () => {\n            this.loadNewMemo().then(\n                () => {\n                    this.memoLoaderTimeoutId = setTimeout(loadMemoLoop, 5000);\n                    // timeout 기능을 통하여 이 작업을 5초마다 반복하도록 설정하였습니다.\n                }\n            );\n        };\n\n        window.addEventListener('scroll', this.scrollEvent, true);\n        // 다른 메서드 에서 외부 메서드를 사용할 경우 scrollEvent 이것을\n        // 무조건 사용하는것 안하는것 bind(this) 해줘야만 this로 무엇인지 가르키고 찾아 연결합니다.\n\n        const loadUntilScrollable = () => {\n            // 화면 해상도에서 스크롤이 안생길경우\n            let documentH = document.documentElement.offsetHeight;  // 지금화면의 document높이\n            let windowH = window.innerHeight;   // 자신이보는 화면의 높이\n            // IF THE SCROLLBAR DOES NOT EXIST,\n            if(documentH < windowH) {\n                this.loadOldMemo().then(\n                    () => {\n                        // DO THIS RECURSIVELY UNLESS IT'S LAST PAGE\n                        if(!this.props.isLast) {\n                            loadUntilScrollable();\n                            // 마지막 리스트까지 반복\n                        }\n                    }\n                );\n            }\n        };\n        \n        this.props.memoListRequest(true, undefined, undefined, this.props.username).then(\n            () => {\n                // BEGIN NEW MEMO LOADING LOOP\n                setTimeout(loadUntilScrollable, 1000);\n                // componentDidMount 부분에 loadUntilScrollable 메소드를, \n                // 메모 초기 로딩 후, 1초뒤 실행하도록 하였습니다.\n                // (나중에 담벼락의 유저가 변경되면서, 메모가 사라질 때도\n                // 애니메이션이 적용됩니다. 애니메이션이 1초 걸리기때문에,\n                // 1초뒤에 스크롤바가 있는지 없는지 확인하고 추가로딩 여부를 정합니다.\n                // 이 부분을 미리 해결해놓지 않으면, 나중에 메모를 처음 로딩 하는 부분에서,\n                // 최종적으론 스크롤바가 없어도, 스크롤바가 있는것으로 인식 할 수도 있습니다)\n\n                loadMemoLoop();\n\n                this.setState({\n                    initiallyLoaded: true\n                });                \n            }\n        );   \n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if(this.props.username !== prevProps.username) {\n            this.componentWillUnmount();\n            this.componentDidMount();\n        }\n        // 여기까지하면, /wall/:username 으로 직접 링크를 쳐서 들어갔을때, 초기 로딩은 잘 됩니다.\n        // 그러나, 그 상태에서 나중에 다른사람을 검색해서 또 들어갔을때\n        // (Link 컴포넌트를 통하여 라우팅 했을 경우), \n        // 컴포넌트가 unmount 되고 다시 mount 되는게 아니라, update 되기 때문에,\n        // 저희가 원하는대로 작동하지 않습니다. 따라서, componentDidUpdate LifeCycle API 를 통하여\n        // username 이 변한것을 감지하고, 변했을 시,\n        // componentWillUnmount 와 componentDidMount 메소드를 임의로 실행해주세요 \n        // – 이렇게 한다고 다시 Mount 되는것은 아니지만, \n        // unmount 될 때와 mount 될 때 저희가 실행하도록 지정한 코드들을 실행 할 수 있습니다.\n    }\n\n\n    componentWillUnmount() {\n        // 컴포넌트가 DOM 에서 사라진 후 실행되는 메소드입니다.\n\n        // STOPS THE loadMemoLoop\n        clearTimeout(this.memoLoaderTimeoutId);\n        \n        // Event remove\n        window.removeEventListener('scroll',this.scrollEvent, true);\n\n        this.setState({\n            initiallyLoaded: false\n        });\n    }\n    \n    loadNewMemo() {\n        // CANCEL IF THERE IS A PENDING REQUEST\n        if(this.props.listStatus === 'WAITING') { \n            return new Promise((resolve, reject)=> {\n                resolve();\n                // 메모 요청 상태가 ‘WAITING’ 일 때는 로딩을 하지 않도록 하게 했는데요,\n                // 잠시 후, 새 메모를 작성 할 때 새 메모를 읽게 끔 트리거 하는 기능도 구현 할 텐데, \n                // 상태가 ‘WAITING’ 일때 무시하는 코드를 넣지 않으면\n                // 똑같은 요청을 두번 할 수 도 있게 되기 때문입니다.\n\n                //  Promise 를 리턴한 이유는, Write 에서 해당 메소드를 입력하고 \n                //  .then 을 사용 할 수 있게 만들기 위함입니다\n                // (메소드를 실행 하고, 성공메시지 / Write 내용초기화를 할건데, \n                // 여기서 그냥 return; 을 날려버리면 만약에 요청이 중첩됐을 때 먹통이 됩니다)\n            });\n        }\n        // IF PAGE IS EMPTY, DO THE INITIAL LOADING\n        if(this.props.memoData.length === 0 ) {\n            return this.props.memoListRequest(true, undefined, undefined, this.props.username);\n            // 페이지가 비어있을 경우에는 초기로딩을 시도하도록 하였습니다.\n        }    \n        return this.props.memoListRequest(false, 'new', this.props.memoData[0]._id, this.props.username);\n        // 첫번째의 new 일경우에만 게시글을 맨위로 불러옴 this.props.memoData[0]\n    }\n\n    loadOldMemo() {\n        console.log(this.props.memoData[0]._id);\n        // 현재 읽고 있는 페이지가 마지막 페이지라면 요청이 취소 함수\n        if(this.props.isLast) {\n            return new Promise(\n                // 나중에 이 메소드를 사용하고 .then() 을 \n                // 사용 할 수 있도록 취소 할 땐, 비어있는 Promise 를 리턴\n                (resolve, reject)=> {\n                    resolve();\n                }\n            );\n        }\n        // GET ID OF THE MEMO AT THE BOTTOM\n        let lastId = this.props.memoData[this.props.memoData.length - 1]._id;\n        // 이전 메모들을 불러오기위하여 페이지에 로드된 메모 중 최하단 메모의 id 를 API로 전해줍\n\n        // START REQUEST\n        return this.props.memoListRequest(false, 'old', lastId, this.props.username).then(() => {\n            // API 를 실행 후, 만약에 방금 읽어들인 페이지가 마지막페이지라면 알림을 띄웁\n            // IF IT IS LAST PAGE, NOTIFY\n            if(this.props.isLast) {\n                console.log('더이상 출력할것이 없습니다.');\n            }\n        });\n    }\n\n    handleEdit(id, index, contents) {\n        return this.props.memoEditRequest(id, index, contents)\n        .then(\n            () => {\n                if( this.props.editStatus.status===\"SUCCESS\") {\n                    console.log('수정 완료했습니다.');\n                } else {\n                    /*\n                        ERROR CODES\n                            1: INVALID ID,\n                            2: EMPTY CONTENTS\n                            3: NOT LOGGED IN\n                            4: NO RESOURCE\n                            5: PERMISSION FAILURE\n                    */\n                   let errorMessage = [\n                        'Something broke',\n                        'Please write soemthing',\n                        'You are not logged in',\n                        'That memo does not exist anymore',\n                        'You do not have permission'\n                    ];\n\n                    let error = this.props.editStatus.error;\n                    // NOTIFY ERROR\n                    console.log(errorMessage[error - 1])\n                \n                    // IF NOT LOGGED IN, REFRESH THE PAGE AFTER 2 SECONDS\n                    if(error === 3) {\n                        setTimeout(()=> {window.location.reload(false)}, 2000);\n                    }\n                }\n            }\n        )\n    }\n\n    handleRemove(id, index) {\n        return this.props.memoRemoveRequest(id, index)\n        .then( \n            () => {\n                console.log('조건문 내부');\n                if(this.props.removeStatus.status===\"SUCCESS\") {\n                    // 스크롤 바가없는 경우 더 많은 메모를로드하십시오.\n                    // 1 초. (애니메이션 1SEC)\n                    console.log('Home');\n                    setTimeout( ()=> {\n                        let documentH = document.documentElement.offsetHeight;  // 지금화면의 document높이\n                        let windowH = window.innerHeight;   // 자신이보는 화면의 높이\n                        // IF THE SCROLLBAR DOES NOT EXIST,\n                        if(documentH < windowH) {\n                            this.loadOldMemo();\n                        }\n                    }, 1000);\n                } else {\n                    // ERROR\n                    /*\n                        DELETE MEMO: DELETE /api/memo/:id\n                        ERROR CODES\n                            1: INVALID ID\n                            2: NOT LOGGED IN\n                            3: NO RESOURCE\n                            4: PERMISSION FAILURE\n                    */\n                    let errorMessage = [\n                        'Something broke',\n                        'You are not logged in',\n                        'That memo does not exist',\n                        'You do not have permission'\n                    ];\n            \n                    // NOTIFY ERROR\n                    console.log(errorMessage[this.props.removeStatus.error - 1]);\n\n\n                    // IF NOT LOGGED IN, REFRESH THE PAGE\n                    if(this.props.removeStatus.error === 2) {\n                        setTimeout(()=> {window.location.reload(false)}, 2000);\n                    }\n                }\n            }\n        );\n    }\n\n    handleStar(id, index) {\n        this.props.memoStarRequest(id, index)\n        .then(\n            () => {\n                if(this.props.starStatus !== 'SUCCESS') {\n                    /*\n                        TOGGLES STAR OF MEMO: POST /api/memo/star/:id\n                        ERROR CODES\n                            1: INVALID ID\n                            2: NOT LOGGED IN\n                            3: NO RESOURCE\n                    */\n                   let errorMessage= [\n                        'Something broke',\n                        'You are not logged in',\n                        'That memo does not exist'\n                    ];\n                \n                \n                    // NOTIFY ERROR\n                    console.log(errorMessage[this.props.starStatus.error - 1]);\n\n\n                    // 로그인하지 않은 경우 페이지를 새로 고칩니다.\n                    if(this.props.starStatus.error === 2) {\n                        console.log('로그인을 해주세요.');\n                        setTimeout(()=> {window.location.reload(false)}, 2000);\n                    }\n                }\n            }\n        )\n    }\n\n    render() {\n        const write = ( \n            <Write onPost={this.handlePost}/>\n        );\n\n        const emptyView = (\n            <div className=\"container\">\n                <div className=\"empty-page\">\n                    <b>{this.props.username}</b> isn't registered or hasn't written any memo\n                </div>\n            </div>\n        );\n        \n        const wallHeader = (\n            <div>\n                <div className=\"container wall-info\">\n                    <div className=\"card wall-info blue lighten-2 white-text\">\n                        <div className=\"card-content\">\n                            {this.props.username}\n                        </div>\n                    </div>\n                </div>\n                { this.props.memoData.length === 0 && this.state.initiallyLoaded ? emptyView : undefined }\n            </div>\n        );\n\n        return (\n            <div className=\"wrapper\">\n                { typeof this.props.username !== \"undefined\" ? wallHeader : undefined }\n                { this.props.isLoggedIn && typeof this.props.username === \"undefined\" ? write : undefined }\n                <MemoList\n                    data={this.props.memoData}\n                    currentUser={this.props.currentUser}\n                    onEdit={this.handleEdit}\n                    onRemove={this.handleRemove}\n                    onStar = {this.handleStar}\n                />\n            </div>\n        );\n    }\n}\n\nHome.PropTypes = {\n    username: PropTypes.string\n};\n\nHome.defaultProps = {\n    username: undefined\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        isLoggedIn : state.authentication.status.isLoggedIn,\n        postStatus : state.memo.post,\n        // 여기서 state.memo 액션 리듀서(module/index.js)의 memo를 의미\n        // post 는 module/memo의 handleActions 내부위 post 를 모두가져온다는 의미\n        currentUser: state.authentication.status.currentUser,\n        memoData: state.memo.list.data,\n        listStatus: state.memo.list.status,\n        isLast: state.memo.list.isLast,\n        // 마지막 페이지에 도달 했을 시, 요청을 취소하기 위함\n        editStatus: state.memo.edit,\n        // module/memo 의 edit 의 state 상태를 가져옴 ex succecc나 faile\n        removeStatus : state.memo.remove,\n        starStatus : state.memo.star\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        memoPostRequest : (contents) => {\n            return dispatch(memoPostRequest(contents));\n        },\n        memoListRequest: (isInitial, listType, id, username) => {\n            return dispatch(memoListRequest(isInitial, listType, id, username));\n        },\n        memoEditRequest: (id, index, contents) => {\n            return dispatch(memoEditRequest(id, index, contents));\n        },     \n        memoRemoveRequest: (id, index) => {\n            return dispatch(memoRemoveRequest(id, index));\n        },\n        memoStarRequest : (id, index) => {\n            return dispatch(memoStarRequest(id, index));\n        }\n    };\n};\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(Home)\n);","import React, { Component } from 'react';\r\n\r\nimport { Home } from 'containers';\r\n\r\nclass Wall extends Component {\r\n  render() {\r\n    console.log(this.props.match.params);\r\n    return (\r\n        <div>\r\n            <Home username={this.props.match.params.username}></Home>\r\n        </div>\r\n    )\r\n    // 클라이언트 라우팅의 params 는 위와같이 this.props.params.___ 으로 읽어옵니다.\r\n  }\r\n}\r\n\r\nexport default Wall","// src/containers/Login.js\nimport React from 'react';\nimport { Authentication } from 'components';\nimport { connect } from 'react-redux';\nimport { loginRequest } from 'module/auth_api';\nimport { withRouter } from 'react-router-dom';\n\nimport $ from 'jquery';\nimport Materialize from 'materialize-css';\n\nclass Login extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleLogin = this.handleLogin.bind(this);\n    }\n    \n    handleLogin(id, pw) {\n        // 맨 앞에 return\n        // handleLogin 메소드를 실행한 실행자에서\n        // handleLogin.then() 방식으로 또 다음 할 작업을 설정 할 수 있게 해줍\n        return this.props.loginRequest(id, pw).then(\n            // 뒤에 .then() 은, AJAX 요청이 끝난다음에 할 작업\n            () => {\n                if(this.props.status === \"SUCCESS\") {\n                    // create session data\n                    let loginData = {\n                        isLoggedIn: true,\n                        username: id\n                    };\n\n                    document.cookie = 'key=' + btoa(JSON.stringify(loginData));\n                    // 로그인이 성공하면, 세션 데이터를 쿠키에 저장\n                    // btoa는 JavaScript의 base64 인코딩 함수\n\n                    // Materialize.toast('Welcome, ' + id + '!', 2000);\n                    // Material.toast 는 Materializecss 프레임워크의 알림 기능\n                    \n                    this.props.history.push(\"/\");\n                    // withRouter 를 통하여 라우팅을 트리거 할 수 있습니다 \n                    // Link 를 누른것과 똑같은 효과, 이를 사용하기 위해 상단에 import\n                    return true;\n                } else {\n                    let $toastContent = $('<span style=\"color: #FFB4BA\">Incorrect username or password</span>');\n                    Materialize.toast($toastContent, 2000);\n                    return false;\n                }\n                // 성공하면 true, 실패하면 false 를 반환하죠?\n                // 이는 성공여부를 알리기 위함입니다 (로그인 실패시 비밀번호 인풋박스 초기화)\n                // authentication 컴포넌트로 전달\n            }\n        );\n    }\n    \n    render() {\n        return (\n            // src\\components/Authentication.js 로 this.handleLogin 함수를 props로 전달\n            <div>\n                <Authentication mode={true}\n                    onLogin={this.handleLogin}/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        status: state.authentication.login.status\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        loginRequest: (id, pw) => { \n            return dispatch(loginRequest(id,pw)); \n        }\n    };\n};\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(Login)\n);","// src/containers/Register.js\nimport React from 'react';\nimport { Authentication } from 'components';\nimport { connect } from 'react-redux';\nimport { registerRequest } from 'module/auth_api';\nimport { withRouter } from 'react-router-dom';\n\nimport $ from 'jquery';\nimport Materialize from 'materialize-css';\n\nclass Register extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleRegister = this.handleRegister.bind(this);\n    }\n\n    handleRegister(id, pw) {\n        return this.props.registerRequest(id, pw).then(\n            () => {\n                console.log(this.props.status);\n                if(this.props.status === \"SUCCESS\") {\n                    Materialize.toast('Success! Please log in.', 2000);\n                    console.log('회원가입 성공!');\n                    this.props.history.push('/login');\n                    return true;\n                } else {\n                    /*\n                        ERROR CODES:\n                            1: BAD USERNAME\n                            2: BAD PASSWORD\n                            3: USERNAME EXISTS\n                    */\n                    let errorMessage = [\n                        'Invalid Username',\n                        'Password is too short',\n                        'Username already exists'\n                    ];\n                    console.log('회원가입 실패!');\n                    let $toastContent = $('<span style=\"color: #FFB4BA\">' + errorMessage[this.props.errorCode - 1] + '</span>');\n                    Materialize.toast($toastContent, 2000);\n                    return false;\n                }\n            }\n        )\n    }\n\n    render() {\n        return (\n            <div>\n                <Authentication mode={false}\n                    onRegister={this.handleRegister}/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        status : state.authentication.register.status,\n        errorCode : state.authentication.register.error\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        registerRequest : (id, pw) => {\n            return dispatch(registerRequest(id, pw));\n        }\n    };\n};\n\nexport default withRouter(\n    connect(mapStateToProps, mapDispatchToProps)(Register)\n);","import { combineReducers } from 'redux';\r\nimport authentication from './auth';\r\nimport memo from './memo';\r\nimport search from './search';\r\n\r\nexport default combineReducers({\r\n    authentication,\r\n    memo,\r\n    search\r\n});","import configure from './configure';\r\nexport default configure();\r\n\r\n// 하나의 애플리케이션에서는 하나의 스토어밖에 없긴 하지만 \r\n// 예외의 케이스가 있기 때문입니다. \r\n// 서버사이드 렌더링을 하게 된다면, 서버쪽에서도 각 요청이 처리 될 때마다 \r\n// 스토어를 생성해주어야 하는데요, 그런 작업을 하게 될 때 이렇게 스토어를 \r\n// 생성하는 함수를 이렇게 모듈화","import { createStore, applyMiddleware } from 'redux';\r\n// applyMiddleware 프레임워크에서 미들웨어는 프레임워크가 요청을 받고\r\n// 응답을 만드는 사이에 놓을 수 있는 코드\r\nimport thunk from 'redux-thunk';\r\n// 리덕스를 사용하는 어플리케이션에서 비동기 작업을 처리를 도와줌\r\n// thunk란, 특정 작업을 나중에 하도록 미루기 위해서 함수형태로 감싼것\r\n// redux-thunk 를 통해 만든 액션생성자는 그 내부에서 여러가지 작업을 할 수 있습니다. \r\n// 네트워크 요청을 해도 무방\r\nimport reducers from 'module';\r\n\r\nconst configure = () => {\r\n    const store = createStore(reducers, applyMiddleware(thunk))\r\n    return store;\r\n}\r\n\r\nexport default configure;","// React\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Router\nimport { BrowserRouter } from \"react-router-dom\";\n// 브라우저 히스토리를 이용해서 구현할 라우터\n// 하나의 자식만을 가질 수 있기 때문에, div로 감싸야한다. 아니면 자식이 여러명이라는 에러가 뜸.\n// 다른 라우팅 컴포넌트(Route, Link)를 사용하기 위해서 기본적으로 감싸줘야 함\n// window.history.pushState()로 동작하는 라우터 (리로드 없이 주소만 갱신하는 함수)\n// 이와 비슷하게 HashRouter는 Hash(#/)으로 동작하는 Router임\n\n// Container Components\nimport { App } from './containers';\n\n// Redux\nimport { Provider } from 'react-redux';\n// Provider 컴포넌트는 connect() 함수를 사용하여 \"연결(connect)\"할 수 있도록 \n// 앱의 store를 \"제공(provide)\"한다.\n// containers 의 login 값을 연결\n\nimport store from 'store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>\n    , document.getElementById('root')\n);"],"sourceRoot":""}